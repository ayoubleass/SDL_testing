

void process(){
    SDL_Event event;
    SDL_PollEvent(&event);
    switch(event.type)
    {
        case SDL_QUIT:
            runing = 0;
            break;
        case SDL_KEYDOWN:
            if (event.key.keysym.sym == SDLK_DOWN)
                key_state = 2;
            if(event.key.keysym.sym == SDLK_UP)
                key_state = 1;
            if(event.key.keysym.sym == SDLK_LEFT)
                key_state = 3;
            if(event.key.keysym.sym == SDLK_RIGHT)
                key_state = 4;
            
            break;

    }
}



void rendre (Dot dot){
    SDL_Rect dot_rec;
    dot_rec.x = dot.x;
    dot_rec.y = dot.y; 
    dot_rec.w = dot.w;
    dot_rec.h = dot.h;
    SDL_SetRenderDrawColor( gRenderer, 0, 0, 0, 0xFF );     
    SDL_RenderClear(gRenderer);
    /*The  buffer swap*/
    SDL_SetRenderDrawColor( gRenderer, 255, 255, 255, 0xFF );     
    SDL_RenderFillRect(gRenderer,&dot_rec);

    SDL_RenderPresent(gRenderer);
}

void update(Dot *dot)
{
    switch(key_state)
    {
        case down:
            move_down(dot, SCREEN_HEIGHT);
            key_state = 0;
            break;
        case up:
            move_up(dot);
            key_state = 0;
            break;
        case right:
            move_right(dot, SCREEN_WIDTH);
            key_state = 0;
            break;
        case left:
            move_left(dot);
            key_state = 0;
            break;;
        default:
            break;
    }

}
int main(int argc, char **argv) {
    SDL_Instance *instance = malloc(sizeof(SDL_Instance));   
    Dot dot;

    dot.x = SCREEN_WIDTH /2;
    dot.y = SCREEN_WIDTH/2;
    dot.w = 15;
    dot.h = 15;
    
    (void) argc, (void) argv;
    runing = init_instance(instance,SCREEN_WIDTH,  SCREEN_HEIGHT, &gRenderer);
   
   

    while(runing){ 
        /*process();
        rendre(dot);
        update(&dot);*/
    }  

    close(instance, gRenderer);
    free(instance); 
    
    return (0);
}
         